#######################################################################################################
#         Abdoulaye Diallo                                                                            #
#         agabdoulaye16@gmail.com                                                                     #
#######################################################################################################
#!/bin/bash

# === Configuration ===
CLUSTER_A_IP="192.168.75.129"                  # IP d'un n≈ìud du Cluster A
TARGET_NODE_HOSTNAME="pve-1"                   # H√¥te o√π ce script tourne (Cluster B)
PBS_STORAGE_NAME_ON_PVE="pbs-backup"           # Nom du stockage PBS ajout√© dans Cluster B
TARGET_STORAGE="local-lvm"                     # Storage cible pour la restauration
CRITICAL_GUESTS=("ct/100")                     # LXC ou VM √† restaurer (format "ct/ID" ou "vm/ID")
LOG_FILE="/var/log/pbs_failover_local.log"     # Fichier de log

# === Initialisation du Logging ===
exec > >(tee -a "$LOG_FILE") 2>&1
echo -e "\n=== Ex√©cution du script le $(date) sur $(hostname) ==="

# === V√©rification du bon n≈ìud ===
CURRENT_NODE=$(hostname)
if [ "$CURRENT_NODE" != "$TARGET_NODE_HOSTNAME" ]; then
    echo "ERREUR: Ce script doit tourner sur '$TARGET_NODE_HOSTNAME', pas sur '$CURRENT_NODE'."
    exit 1
fi

# V√©rifier si PBS est accessible sur ce n≈ìud
if ! pvesm status --storage "$PBS_STORAGE_NAME_ON_PVE" | grep -q 'active.*1'; then
    echo "ERREUR: Le stockage PBS '$PBS_STORAGE_NAME_ON_PVE' n'est pas actif sur ce n≈ìud."
    exit 1
fi

# === Fonction: V√©rifie la connectivit√© de Cluster A ===
check_cluster_a_availability() {
    echo "üïì $(date) ‚Äî D√©but du processus de v√©rification du Cluster A"
    if ping -c 3 -W 2 "$CLUSTER_A_IP" >/dev/null 2>&1; then
        echo "‚úÖ Cluster A ($CLUSTER_A_IP) est joignable (ping OK)"
        return 0
    else
        echo "‚ùå Cluster A ($CLUSTER_A_IP) est injoignable"
        return 1
    fi
}

# === Fonction: Restauration automatique depuis PBS ===
restore_guest() {
    local guest_id_full="$1"             # Ex: "ct/100"
    local guest_type="${guest_id_full%%/*}" # ct ou vm
    local guest_id="${guest_id_full#*/}"    # 100

    echo "üîÑ Restauration de la $guest_type $guest_id √† partir de PBS..."

    # Obtenir le dernier snapshot PBS
    local backup_volume=$(pvesm list "$PBS_STORAGE_NAME_ON_PVE" | grep "backup/${guest_id_full}/" | sort -rk1 | head -n1 | awk '{print $1}')

    if [ -z "$backup_volume" ]; then
        echo "‚ùå Aucune sauvegarde trouv√©e pour $guest_id_full dans $PBS_STORAGE_NAME_ON_PVE."
        return 1
    fi

    echo "üì¶ Dernier backup trouv√© : $backup_volume"

    local restore_cmd=""
    local start_cmd=""

    if [ "$guest_type" == "ct" ]; then
        restore_cmd="pct restore $guest_id $backup_volume --storage $TARGET_STORAGE --unique 1"
        start_cmd="pct start $guest_id"
    elif [ "$guest_type" == "vm" ]; then
        restore_cmd="qm restore $guest_id $backup_volume --storage $TARGET_STORAGE --unique 1"
        start_cmd="qm start $guest_id"
    else
        echo "‚ùå Type inconnu pour $guest_id_full"
        return 1
    fi

    echo "‚ñ∂Ô∏è Commande: $restore_cmd"
    if eval "$restore_cmd"; then
        echo "‚úÖ $guest_type $guest_id restaur√© avec succ√®s."
        echo "üöÄ D√©marrage de $guest_type $guest_id..."
        if eval "$start_cmd"; then
            echo "‚úÖ $guest_type $guest_id d√©marr√©."
            return 0
        else
            echo "‚ö†Ô∏è √âchec du d√©marrage pour $guest_type $guest_id."
            return 1
        fi
    else
        echo "‚ùå Restauration √©chou√©e pour $guest_id_full."
        return 1
    fi
}

# === Logique principale ===
main() {
    if check_cluster_a_availability; then
        echo "‚ÑπÔ∏è Cluster A est UP. Aucune restauration n√©cessaire."
        exit 0
    fi

    echo "üö® Cluster A est DOWN. D√©but du processus de failover automatique."
    echo "‚ÄºÔ∏è V√©rifiez manuellement qu‚Äôil ne s'agit pas d'un faux positif (risque de split-brain)."

    local overall_success=true
    for guest in "${CRITICAL_GUESTS[@]}"; do
        echo -e "\nüîß Traitement de $guest"
        if ! restore_guest "$guest"; then
            echo "‚ùå √âchec de restauration de $guest"
            overall_success=false
        fi
    done

    if $overall_success; then
        echo "üéâ Tous les invit√©s ont √©t√© restaur√©s avec succ√®s."
        exit 0
    else
        echo "‚ö†Ô∏è Une ou plusieurs restaurations ont √©chou√©. Consultez les logs."
        exit 1
    fi
}

# === Ex√©cution ===
main
